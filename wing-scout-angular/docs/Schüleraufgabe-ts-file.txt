
Aufgabe f√ºr Sch√ºler: Aufteilung der Angular-App in logische Komponenten
Ziel der Aufgabe:
Die Sch√ºler sollen die bestehende Angular-App (app.component.ts) in logische Komponenten aufteilen. Dabei sollen sie die Dateien app.component.ts, app.component.html und app.component.css erstellen und den Code sinnvoll strukturieren. Zus√§tzlich sollen sie darauf achten, dass die Imports korrekt √ºbertragen werden.

Schritt-f√ºr-Schritt-Anleitung:
1. Vorbereitung
Erstelle einen neuen Ordner f√ºr die Angular-App (falls noch nicht vorhanden).

Erstelle die folgenden Dateien manuell:

ordner components
- header
- main
- footer
- modale


app.xy.ts

app.xy.html

app.x.css

files f√ºr die jeweiligen components.

Kopiere den gegebenen Code in die entsprechenden Dateien.

2. Aufteilung des Codes
Der Code ist in folgende logische Gruppen unterteilt:

Komponenten-Deklaration:

Hier wird die Angular-Komponente mit @Component deklariert.

Die notwendigen Module (z. B. CommonModule, FormsModule) werden importiert.

Zustandsverwaltung:

Zustandsvariablen wie isMenuOpen, modalType, feedback, starships, favorites, cart usw. werden hier verwaltet.

Kategorien und Bilder:

Die Kategorien der Schiffe (shipCategories) und die zugeh√∂rigen Bilder (starshipImages) werden definiert.

Initialisierung:

Im Konstruktor werden die Schiffe, Favoriten und der Warenkorb geladen.

Methoden:

Methoden zur Steuerung der Benutzerinteraktionen wie Men√ºsteuerung, Modalsteuerung, Filterung, Favoritenverwaltung, Warenkorbverwaltung und PDF-Export.

3. Aufgabenstellung
Teil 1: Strukturierung der Dateien
app.component.ts:

Behalte die Komponenten-Deklaration (@Component) und die Logik (Zustandsverwaltung, Methoden) in dieser Datei.

Entferne das HTML-Template und die CSS-Datei aus der @Component-Deklaration und verweise stattdessen auf die externen Dateien:

typescript
Copy
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './app.component.html', // Verweis auf die externe HTML-Datei
  styleUrls: ['./app.component.css'], // Verweis auf die externe CSS-Datei
})
app.component.html:

Erstelle das HTML-Template f√ºr die App.

Verwende die Zustandsvariablen und Methoden aus der app.component.ts-Datei, um die Benutzeroberfl√§che zu gestalten.

Beispiel:

html
Copy
<div>
  <h1>Willkommen zur Raumschiff-App</h1>
  <button (click)="toggleMenu()">Men√º √∂ffnen/schlie√üen</button>
  <div *ngIf="isMenuOpen">
    <!-- Men√º-Inhalt -->
  </div>
</div>
Run HTML
app.component.css:

F√ºge CSS-Stile f√ºr die App hinzu.

Beispiel:

css
Copy
h1 {
  color: blue;
}
Teil 2: Logische Aufteilung
Zustandsverwaltung:

Identifiziere alle Zustandsvariablen (z. B. isMenuOpen, starships, favorites) und behalte sie in der app.component.ts-Datei.

Methoden:

Teile die Methoden in logische Gruppen ein:

Men√ºsteuerung (toggleMenu, closeMenu)

Modalsteuerung (openModal, closeModal, resetAllModals)

Filterung (applyFilters, resetFilters)

Favoritenverwaltung (handleAddToFavorites, loadFavorites)

Warenkorbverwaltung (handleAddToCart, addToCartWithQuantity, removeFromCart)

API-Aufrufe (loadInitialStarships, getStarships)

Hilfsfunktionen (formatPrice, scrollToTop)

Kategorien und Bilder:

Behalte die Definitionen der Kategorien (shipCategories) und Bilder (starshipImages) in der app.component.ts-Datei.

Teil 3: Imports und Abh√§ngigkeiten
Stelle sicher, dass alle notwendigen Imports korrekt √ºbertragen werden:

CommonModule und FormsModule aus @angular/common und @angular/forms.

jsPDF aus jspdf.

4. Tipps f√ºr die Sch√ºler
Strukturierung: Teile den Code in kleine, wiederverwendbare Methoden auf.

Kommentare: F√ºge Kommentare hinzu, um den Code besser verst√§ndlich zu machen.

Testing: Teste die App nach jeder √Ñnderung, um sicherzustellen, dass alles korrekt funktioniert.

Erweiterungen: Optional k√∂nnen die Sch√ºler die App um weitere Funktionen erweitern, z. B. eine Suchfunktion oder zus√§tzliche Filter.

5. Beispiel-L√∂sung
app.component.ts
typescript
Copy
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { jsPDF } from 'jspdf';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {
  // Zustandsverwaltung
  isMenuOpen = false;
  modalType: string | null = null;
  feedback: string | null = null;
  starships: any[] = [];
  filteredStarships: any[] = [];
  favorites: any[] = [];
  cart: any[] = [];
  quantity: number = 1;
  showQuantityModal: boolean = false;
  selectedShip: any = null;

  // Kategorien und Bilder
  shipCategories = [...]; // Kategorien hier einf√ºgen
  starshipImages = { ... }; // Bilder hier einf√ºgen

  constructor() {
    this.loadInitialStarships();
    this.loadFavorites();
    this.loadCart();
  }

  // Methoden
  toggleMenu() { ... }
  openModal(type: string) { ... }
  closeModal(event?: Event) { ... }
  resetAllModals() { ... }
  handleCategoryClick(categoryId: string) { ... }
  applyFilters() { ... }
  resetFilters() { ... }
  handleAddToFavorites(ship: any) { ... }
  handleAddToCart(ship: any) { ... }
  addToCartWithQuantity() { ... }
  removeFromCart(shipId: string) { ... }
  calculateTotalPrice() { ... }
  handleClearCart() { ... }
  handleCheckout() { ... }
  handlePayNow() { ... }
  handleQuantityChange(event: Event) { ... }
  incrementQuantity() { ... }
  decrementQuantity() { ... }
  loadInitialStarships() { ... }
  getStarships(baseUrl: string, page: number) { ... }
  formatPrice(price: number): string { ... }
  scrollToTop() { ... }
  isFavorite(shipId: string): boolean { ... }
  isInCart(shipId: string): boolean { ... }
  handleExportToPDF() { ... }
}
app.component.html
html
Copy
<div>
  <h1>Raumschiff-App</h1>
  <button (click)="toggleMenu()">Men√º</button>
  <div *ngIf="isMenuOpen">
    <!-- Men√º-Inhalt -->
  </div>
  <div *ngIf="showFilterModal">
    <!-- Filter-Modal -->
  </div>
  <div *ngIf="showFavorites">
    <!-- Favoriten-Modal -->
  </div>
  <div *ngIf="showCart">
    <!-- Warenkorb-Modal -->
  </div>
</div>
Run HTML
app.component.css
css
Copy
h1 {
  color: blue;
}
6. Bewertungskriterien
Strukturierung: Der Code ist logisch in Komponenten aufgeteilt.

Funktionalit√§t: Die App funktioniert wie erwartet.

Code-Qualit√§t: Der Code ist gut kommentiert und lesbar.

Kreativit√§t: Optional k√∂nnen zus√§tzliche Funktionen implementiert werden.

Viel Erfolg! üöÄ